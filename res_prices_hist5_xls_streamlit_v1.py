import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator

# Adjusted column positions (0-indexed)
columns_positions = [1, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32]  # Adjusted for 0-indexing

# Display header
st.title("Private Domestic - Price Indices for Selected Popular Developments (from 1992)")

# Display class information in sidebar
st.sidebar.markdown("""
**Saleable unit area:**
- Class A: less than 40 m².
- Class B: between 40 m² to 69.9 m².
- Class C: between 70 m² to 99.9 m².
- Class D: between 100 m² to 159.9 m².
- Class E: from 160 m².
                    
** Region:**
- Urban: Hong Kong Island, Kowloon
- N.T.: New Territories
                    
""")

uploaded_file = st.file_uploader("Choose an Excel file (.xls)", type="xls")

if uploaded_file is not None:
    df = pd.read_excel(uploaded_file, skiprows=7, usecols=columns_positions)

    # Renaming columns
    df.columns = [
        'Year', 'Month', 
        'ABC_Urban', 'ABC_NT', 'ABC_All', 
        'DE_Urban', 'DE_NT', 'DE_All', 
        'Overall_Urban', 'Overall_NT', 'Overall_All'
    ]

    # Create a fresh data column in the format yyyy-mm-dd starting at 1992-01-31
    df['date'] = pd.date_range(start='1992-01-31', periods=len(df), freq='M')

    # Rearrange and clean data
    df = df.drop(['Year', 'Month'], axis=1)
    df = df[['date', 'ABC_Urban', 'ABC_NT', 'ABC_All', 'DE_Urban', 'DE_NT', 'DE_All', 'Overall_Urban', 'Overall_NT', 'Overall_All']]
    df = df.dropna()

    st.write("Data Preview:", df.tail(20))

    # Create a tidy dataframe
    df_tidy = pd.melt(df, id_vars='date', var_name='series_name', value_name='index')
    st.write("Tidy Data Preview:", df_tidy.head())

    # Generate line charts for each time series
    series_names = df_tidy['series_name'].unique()
    selected_series = st.selectbox('Select a series to visualize:', series_names)

    # Display selected series plot
    series_data = df_tidy[df_tidy['series_name'] == selected_series]
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(series_data['date'], series_data['index'], label=selected_series)
    ax.set_title(selected_series)
    ax.grid(True, which='both', color='0.9', linewidth=0.4)
    ax.set_xlabel('date')
    ax.set_ylabel('index')
    ax.yaxis.set_major_locator(MultipleLocator(20))
    ax.set_ylim(50, 400)
    ax.legend()
    st.pyplot(fig)

    # Calculate and plot year-on-year percent change
    df_tidy.loc[df_tidy['series_name'] == selected_series, selected_series + '_yoy'] = df_tidy.loc[df_tidy['series_name'] == selected_series, 'index'].pct_change(12) * 100
    series_data_yoy = df_tidy[df_tidy['series_name'] == selected_series]

    fig_yoy, ax_yoy = plt.subplots(figsize=(10, 6))
    ax_yoy.plot(series_data_yoy['date'], series_data_yoy[selected_series + '_yoy'], label=selected_series)
    ax_yoy.set_title(selected_series + ' - Year-on-Year Change (%)')
    ax_yoy.grid(True, which='both', color='0.9', linewidth=0.4)
    ax_yoy.set_xlabel('date')
    ax_yoy.set_ylabel('Year-on-Year Change (%)')
    ax_yoy.yaxis.set_major_locator(MultipleLocator(10))
    ax_yoy.set_ylim(-60, 80)
    ax_yoy.legend()
    st.pyplot(fig_yoy)

# Display attribution and caution
st.markdown("""
**Attribution and caution:**  
1. All data for series is sourced from the Hong Kong government.  
2. The year on year changes and charts are generated by code and may be subject to error and miscalculation. No liability is assumed for computed data and generated charts.
""")

# If you also want to include a link to the data source as part of your attribution, you can do it like this
url = "https://data.gov.hk/en-data/dataset/hk-rvd-tsinfo_rvd-property-market-statistics/resource/cbf55fcb-97f0-4522-a171-2860a3b7a93f"
url_text = "Visit the Hong Kong government data.gov.hk website for more information."

# Display the link using Markdown
st.markdown(f"[{url_text}]({url})", unsafe_allow_html=True)